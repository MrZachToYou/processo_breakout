//Authors: Logan Gray, Zachary Johnson

//Colors
size(800,400);

int NUM_ROWS = 12;
int NUM_BRICKS_PER_ROW = 3;
int BRICK_TOP_OFFSET = 30;
int BRICK_SPACING = 3;
int BRICK_HEIGHT = 10;
int SPACE_FOR_BRICKS = width - (NUM_BRICKS_PER_ROW + 1) * BRICK_SPACING;
int BRICK_WIDTH = SPACE_FOR_BRICKS / NUM_BRICKS_PER_ROW;//76

int PADDLE_WIDTH = 80;
int PADDLE_HEIGHT = 15;
int PADDLE_OFFSET = 45;

color blue = rgb(53,113,253);
color black = rgb(0,0,0);
color orange =rgb(246,162,35);
color gray = rgb(154,154,152);
color white= rgb(255,255,255);
color green =rgb(133,233,1);
color red=rgb(255,76,0);

int arrayTotal = NUM_ROWS*NUM_BRICKS_PER_ROW;
int[] brickX=new int[arrayTotal];
int[] brickY=new int[arrayTotal];
boolean[] liveBricks = new boolean[arrayTotal];
color[] brickColor= new color[arrayTotal];

boolean clicked=false;
boolean helpText=true;
boolean debug=true;
int page=0;
int count=0;
int lives = 3;
int winCounter = arrayTotal;
int score=0;

//BALL LOCATION/MOVEMENT
int startPageBallX=width/2;
int startPageBallY=height/2;
int ballX = startPageBallX;
int ballY = startPageBallY;
int ballDiameter = 10;
int ballRadius = ballDiameter/2;
int disX = 0;
int disY = 0;
int startPageBallMoveX=5;//speed and direction of the balls x movement
int startPageBallMoveY=5;//speed and direction of the balls y movement


//sets all bricks as active at every start button press
void resetBrickStatus(){
    for(int i=0;i<arrayTotal;i++){
    liveBricks[i]=true;
    
    }
}
resetBrickStatus();

for(int i=0;i<arrayTotal;i++){
    if((i/NUM_BRICKS_PER_ROW) % 8 == 0 || (i/NUM_BRICKS_PER_ROW) % 8 == 1){
        brickColor[i]=red;
    }
    if((i/NUM_BRICKS_PER_ROW) % 8 == 2 || (i/NUM_BRICKS_PER_ROW) % 8 == 3){
        brickColor[i]=orange;
    }
    if((i/NUM_BRICKS_PER_ROW) % 8 == 4 || (i/NUM_BRICKS_PER_ROW) % 8 == 5){
             brickColor[i]=green;
    }
    if((i/NUM_BRICKS_PER_ROW) % 8 == 6 || (i/NUM_BRICKS_PER_ROW) % 8 == 7){
        brickColor[i]=blue;
    }
}


for(int i=0;i<NUM_ROWS;i++){
    
    for(int j=0;j<NUM_BRICKS_PER_ROW;j++){
        brickX[count]=3+((BRICK_SPACING+BRICK_WIDTH)*j);
        
        brickY[count]=20+((BRICK_SPACING+BRICK_HEIGHT)*i);
        count++;
    }
    
}   




//Checks if block array X and Y are set properly
//for(int i=0;i<80;i++){
//    println("X: "+blockX[i]+", Y: "+blockY[i]);
//}


void keyPressed(){
    
    if(key==' '&&helpText){ //Starting ball movement when space is pressed
        disX=3;
        disY=3;
        helpText=false;
    }
    
    if(key=='w'&& debug){
        page=2;
    }
    if(key=='l'&&debug){
        page =3;
    }
    
    
}

void ball(){
    fill(white);
    ellipse(ballX,ballY,ballDiameter,ballDiameter);
}

void startPageBall(){
    fill(white);
    ellipse(startPageBallX,startPageBallY,ballDiameter,ballDiameter);
}

void drawPaddle(){
    fill(white);
    rect(mouseX-(PADDLE_WIDTH/2),height-PADDLE_OFFSET-PADDLE_HEIGHT,PADDLE_WIDTH,PADDLE_HEIGHT);
}

void startPagePaddle(){
    fill(white);
    rect(startPageBallX-(PADDLE_WIDTH/2),height-PADDLE_OFFSET-PADDLE_HEIGHT,PADDLE_WIDTH,PADDLE_HEIGHT);
}

void makeHeart(int x, int y){ //makes an image of a heart for the lives counter
    //heart
    noStroke();
    fill(red);
    
    //circle
    ellipse(x-7,y,15,15);
    //circle
    ellipse(x+7,y,15,15);
    //quad
    quad(x-14,y+2,x,y+2,x,y+17,x-14,y+2);
    //quad
    quad(x+14,y+2,x,y+2,x,y+17,x+14,y+2);
}

void resetBall(){
    if(page==1||page==2||page==3){
        ballX = width/2;
        ballY = height/2;
        disX = 0;
        disY = 0;
        helpText=true;
    }
}

void mousePressed(){
    clicked=true;
    //Start Button
    if(page==0 && ((mouseX>=350&&mouseX<=450)&&(mouseY>=100&&mouseY<=125)) ){
        page=1;
        winCounter = arrayTotal;
    }
    //Play Again Button from Win Screen
    if(page ==2&&((mouseX>=350&&mouseX<=500)&&(mouseY>=100&&mouseY<=125)) ){
        resetBrickStatus();
        resetBall();
        winCounter = arrayTotal;
        page =1;
    }
    //Play Again Button from Lose Screen
    if(page ==3&&((mouseX>=350&&mouseX<=500)&&(mouseY>=100&&mouseY<=125)) ){
        resetBrickStatus();
        resetBall();
        score=0;
        winCounter = arrayTotal;
        lives=3;
        page =1;
    }
    //Main Menu button from Win Screen
    if((page ==2||page ==3)&&((mouseX>=350&&mouseX<=500)&&(mouseY>=150&&mouseY<=175)) ){
        resetBrickStatus();
        resetBall();
        winCounter = arrayTotal;
        score=0;
        page =0;
    }
    
    
    
    clicked=false;
}




void winCondition(int i){
    if(!liveBricks[i]){
        winCounter--;
    }else{
        winCounter = arrayTotal;
    }
    if(winCounter == 0){
        page = 2;
    }
}

void loseCondition(){
    if(lives==1){
        page = 3;
    }else{
        lives--;
        resetBall();
    }
}

void checkBricks(){
    for(int i = 0; i < arrayTotal;i++){
        if(liveBricks[i]){
        if((ballX > brickX[i] && ballX < brickX[i]+BRICK_WIDTH) &&           // within x values
      abs(ballY - brickY[i]) <= ballRadius ||                         // top brick
      ((ballX > brickX[i] && ballX < brickX[i]+BRICK_WIDTH) &&           // within x values
      abs(ballY - (brickY[i] + BRICK_HEIGHT)) <= ballRadius)){        // bottom brick
        
        disY = -disY;
        println("top/bottom");
        liveBricks[i] = false;
            score = score + 100;
            winCondition(i);
        
    }else if( ((ballY > brickY[i] && ballY < brickY[i]+BRICK_HEIGHT) &&  //within y values
      abs(ballX - brickX[i]) <= ballRadius) ||                        //left brick
      ((ballY > brickY[i] && ballY < brickY[i]+BRICK_HEIGHT) &&          //within y values
      abs(ballX - (brickX[i] + BRICK_WIDTH)) <= ballRadius) ){        //right brick
        
            disX = -disX;
            println("sides");
            liveBricks[i] = false;
            score = score + 100;
            winCondition(i);
        
    }else if( (abs(ballX - brickX[i]) <= ballRadius &&            //left brick
      ballX - brickX[i] <= 0 &&                                   // ^^^
      abs(ballY - brickY[i]) <= ballRadius &&                     //top brick
      ballY - brickY[i] <= 0) ||                                  // ^^^
           
      (abs(ballX - brickX[i]) <= ballRadius &&                    //left brick
      ballX - brickX[i] <= 0 &&                                   // ^^^
      abs(ballY - (brickY[i] + BRICK_HEIGHT)) <= ballRadius &&    //bottom brick
      ballY - brickY[i] >= 0) ||                                  // ^^^
           
      (abs(ballX - (brickX[i] + BRICK_WIDTH)) <= ballRadius &&    //right brick
      ballX - brickX[i] >= 0 &&                                   // ^^^
      abs(ballY - brickY[i]) <= ballRadius &&                     //top brick
      ballY - brickY[i] <= 0) ||                                  // ^^^
           
      (abs(ballX - (brickX[i] + BRICK_WIDTH)) <= ballRadius &&    // right brick
      ballX - brickX[i] >= 0 &&                                   // ^^^
      abs(ballY - (brickY[i] + BRICK_HEIGHT)) <= ballRadius &&    // bottom brick
      ballY - brickY[i] >= 0) ){                                  // ^^^
            
            disX = -disX;
            disY = -disY;
        println("corner");
            liveBricks[i] = false;
            score = score + 100;
            winCondition(i);
    }
    }
}
}

void makeRows(){
    
    for(int i=0;i<arrayTotal;i++){
        fill(brickColor[i]);
        if(liveBricks[i]==true){
            
            rect(brickX[i],brickY[i],BRICK_WIDTH,BRICK_HEIGHT);
        }
    }
}

void livesCounter(){
    //location bottom right corner
    fill(white);
    textSize(20);
    text("Lives : ",600,375);
    
    if(lives == 3){
        makeHeart(680,370);
        makeHeart(710,370);
        makeHeart(740,370);
    }
    if(lives == 2){
        makeHeart(680,370);
        makeHeart(710,370);
    }
    if(lives == 1){
        makeHeart(680,370);
        
    }
    
    
    
}





void startPage(){
    background(black);
    fill(white);
    textSize(40);
    text("Breakout",330,50);
    startPageBall();
    startPagePaddle();
    fill(gray);
    rect(350,100,100,25);
    textSize(20);
    fill(white);
    text("start",375,120);
    
    
    if(startPageBallX+10>=width||startPageBallX-10<=0){
        startPageBallMoveX=-startPageBallMoveX;
    }
    if(startPageBallY+10>=height||startPageBallY-10<=0){
        startPageBallMoveY=-startPageBallMoveY;
    }
    if((startPageBallX >= startPageBallX-(PADDLE_WIDTH/2) && (startPageBallX <= startPageBallX+(PADDLE_WIDTH/2)) && startPageBallY+10 >= height-PADDLE_OFFSET-PADDLE_HEIGHT+2)){
            
            startPageBallMoveY = -startPageBallMoveY;
            
        }
    startPageBallX=startPageBallX+startPageBallMoveX;
    startPageBallY=startPageBallY+startPageBallMoveY;
}

void gamePage(){
    background(black);
    ball();
    drawPaddle();
    makeRows();
    if(helpText){
        fill(white);
        textSize(40);
        text("Press Space To Start",300,250);
    }
    
    //Checking if the ball is hitting a Wall
    if(ballX+5>=width||ballX-5<=0){
        
        disX=-disX;
    }
    //Checking if the ball is hitting the Ceiling
    if(ballY-10<=0){
        disY=-disY;
    }
    //Paddle 
    if((ballX >= mouseX-(PADDLE_WIDTH/2) && (ballX <= mouseX+(PADDLE_WIDTH/2)) 
        && ballY+10 >= height-PADDLE_OFFSET-PADDLE_HEIGHT+2)){
        if((ballX >= mouseX)&& disX<1){
            disX=-disX;
        }
        if((ballX <= mouseX)&& disX>1){
            disX=-disX;
        }
            disY = -disY;
            
    }
    //Three Sections
    //Left
    if(ballX>= mouseX-(40)&&(ballX<= mouseX-(13))&& (ballY+10 >= height-PADDLE_OFFSET-PADDLE_HEIGHT+2)){
        disX=-4;
        disY=-3;
    }
    //Middle
    if(ballX>= mouseX-(13)&&(ballX<= mouseX+(13))&& (ballY+10 >= height-PADDLE_OFFSET-PADDLE_HEIGHT+2)){
        if(disX>1){
            disX=3;
        }else{
        
            disX=-3;
        }
        disY=-3;
    }
    //Right
    if(ballX>= mouseX+(13)&&(ballX<= mouseX+(39))&& (ballY+10 >= height-PADDLE_OFFSET-PADDLE_HEIGHT+2)){
        disX=4;
        disY=-3;
    }

        
    
    checkBricks();
    if(ballY+10>=height){
        loseCondition();
    }
    fill(white);
    textSize(15);
    text("Score: "+score,50,390);
    
    livesCounter();
        ballX=ballX+disX;
        ballY=ballY+disY;
    
}

void winPage(){
    background(green);
    fill(white);
    textSize(40);
    text("Congratulations",270,50);
    
    fill(gray);
    rect(0,250,width,150);
    
    fill(white);
    textSize(25);
    text("Score: "+score,270,300);
    
    fill(gray);
    noStroke();
    rect(350,100,150,25);
    textSize(20);
    fill(white);
    text("Play Again?",375,120);//score will be consistant
    
    fill(gray);
    rect(350,150,150,25);
    fill(white);
    text("Main Menu",375,170);
}

void losePage(){
    background(red);
    fill(white);
    textSize(40);
    text("All Lives Lost",270,50);
    
    fill(gray);
    rect(0,250,width,150);
    
    fill(white);
    textSize(25);
    text("Score: "+score,270,300);
    
    fill(gray);
    noStroke();
    rect(350,100,150,25);
    textSize(20);
    fill(white);
    text("Play Again?",375,120);//score will be consistant
    
    fill(gray);
    rect(350,150,150,25);
    fill(white);
    text("Main Menu",375,170);
    
    
}





void draw(){
    if(page==0){
        startPage();
    }
    if(page==1){
        gamePage(); 
    }
    if(page==2){
        winPage(); 
    }
    if(page==3){
        losePage(); 
    }
    
    
    
}
//destination xy that the ball is going to end up when it hits somthing that is not a paddle or a wall
//


